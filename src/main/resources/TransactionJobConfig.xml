<beans xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	">

    <import resource="DatabaseContext.xml"/>
    <import resource="context.xml"/>

    <batch:job id="OrderlinetoTransactionJob">
        <batch:step id="OrderlineprocessorStep" next="orderlineErrorStatustoOrdersTasklet">
            <batch:tasklet>
                <batch:chunk reader="orderlineItemReader" processor="orderlinetoTransactionProcessor"
                             writer="transactionJobWriter"
                             commit-interval="10" skip-limit="10" retry-limit="10">
                    <batch:skippable-exception-classes>
                        <batch:include class="java.lang.Exception"/>
                        <batch:exclude class="java.sql.SQLException"/>
                    </batch:skippable-exception-classes>
                    <batch:retryable-exception-classes>
                        <batch:include class="org.springframework.dao.DeadlockLoserDataAccessException"/>
                    </batch:retryable-exception-classes>
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
        <batch:step id="orderlineErrorStatustoOrdersTasklet" next="orderErrorStatustoOrdersTasklet">
            <tasklet ref="orderlineErrorStatusUpdater"/>
        </batch:step>
        <batch:step id="orderErrorStatustoOrdersTasklet">
            <tasklet ref="orderErrorStatusUpdater"/>
        </batch:step>
    </batch:job>


    <bean id="orderlineItemReader"
          class="org.springframework.batch.item.database.JdbcCursorItemReader"
          scope="step">
        <property name="dataSource" ref="dataSource"/>
        <property name="sql">
            <value><![CDATA[
                SELECT orderline_.ID as 'OrderlineID', order_.Sum_ as OrderSum_,
                orderline_.FundID, fund_.percentage, orderline_.ThrowsException as ThrowsException
                FROM  orderline_ join order_ on orderline_.OrderID = order_.ID join fund_ on orderline_.fundID = fund_.id
                where orderline_.STATUS = 'checked'
                AND order_.Status <> 'ERROR';]]>
            </value>
        </property>
        <property name="rowMapper">
            <bean class="TransactionJob.OrderlineRowMapper"/>
        </property>
    </bean>

    <bean id="orderlineErrorStatusUpdater" class="TransactionJob.SingleSQLStatementTasklet">
        <property name="dataSource" ref="dataSource"/>
        <property name="sql">
            <value>
                <![CDATA[
            update orderline_
            join order_ on orderline_.orderID = order_.ID
            set orderline_.STATUS ='error'
            WHERE orderline_.STATUS='checked';
                ]]>
            </value>
        </property>
    </bean>
    <bean id="orderErrorStatusUpdater" class="TransactionJob.SingleSQLStatementTasklet">
        <property name="dataSource" ref="dataSource"/>
        <property name="sql">
            <value>
                <![CDATA[
            update orderline_
            join order_ on orderline_.orderID = order_.ID
            set order_.STATUS ='error'
            WHERE orderline_.STATUS='error';
                ]]>
            </value>
        </property>
    </bean>


    <bean id="orderlinetoTransactionProcessor" class="TransactionJob.OrderlinetoTransactionItemProcessor"/>

    <bean id="transactionJobWriter"
          class="org.springframework.batch.item.support.CompositeItemWriter">
        <property name="delegates">
            <list>
                <ref bean="transactionWriter"/>
                <ref bean="orderlineStatusUpdater"/>
                <ref bean="orderStatusUpdater"/>
            </list>
        </property>
    </bean>
    <bean id="transactionWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter">
        <property name="dataSource" ref="dataSource"/>
        <property name="sql">
            <value>
                <![CDATA[
                    INSERT INTO TRX_
                    (FundID, OrderlineID, Sum_, TradeDate)
                    VALUES
                    (?,?,?,?)
                ]]>
            </value>
        </property>
        <property name="itemPreparedStatementSetter">
            <bean class="TransactionJob.TransactionPreparedStatementSetter"/>
        </property>
    </bean>
    <bean id="orderlineStatusUpdater" class="org.springframework.batch.item.database.JdbcBatchItemWriter">
        <property name="dataSource" ref="dataSource"/>
        <property name="sql">
            <value>
                <![CDATA[
                UPDATE orderline_
                JOIN order_ on orderline_.orderID=order_.ID
                SET orderline_.STATUS = 'pending'
                WHERE orderline_.id = ?
                ]]>
            </value>
        </property>
        <property name="itemPreparedStatementSetter">
            <bean class="TransactionJob.StatusPreparedStatementSetter"/>
        </property>
    </bean>
    <bean id="orderStatusUpdater" class="org.springframework.batch.item.database.JdbcBatchItemWriter">
        <property name="dataSource" ref="dataSource"/>
        <property name="sql">
            <value>
                <![CDATA[
                UPDATE order_
                JOIN orderline_ on orderline_.orderID=order_.ID
                SET order_.STATUS = 'pending'
                WHERE orderline_.id = ?
                ]]>
            </value>
        </property>
        <property name="itemPreparedStatementSetter">
            <bean class="TransactionJob.StatusPreparedStatementSetter"/>
        </property>
    </bean>

</beans>